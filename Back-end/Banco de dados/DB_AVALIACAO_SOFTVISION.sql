/* CRIAÇÃO E USO DA BASE DE DADOS */

CREATE DATABASE id6843545_db_avaliacao_softvision CHARACTER SET = 'utf8mb3' COLLATE = 'utf8mb3_general_ci';

USE id6843545_db_avaliacao_softvision;

/* CRIAÇÃO DAS TABELAS */

CREATE TABLE EMPRESA
(
	CODIGO INT NOT NULL,
	NOME VARCHAR(100) NOT NULL
);

CREATE TABLE CARGO
(
	CODIGO INT NOT NULL,
	NOME VARCHAR(100) NOT NULL
);

CREATE TABLE FUNCIONARIO_CARGO
(
	CODIGO INT NOT NULL,
	CARGO INT NOT NULL,
	EMPRESA INT NOT NULL,
	DATA_INICIO DATE NOT NULL,
	DATA_FIM DATE,
	DESCRICAO TEXT
);

/* DEFINIÇÃO DAS CHAVES PRIMÁRIAS */

ALTER TABLE CARGO ADD PRIMARY KEY PK_CARGO (CODIGO);
ALTER TABLE EMPRESA ADD PRIMARY KEY PK_EMPRESA (CODIGO);
ALTER TABLE FUNCIONARIO_CARGO ADD PRIMARY KEY PK_FUNCIONARIO_CARGO (CODIGO);

/* DEFINIÇÃO DO AUTO_INCREMENT PARA AS CHAVES PRIMÁRIAS */

ALTER TABLE CARGO MODIFY CODIGO INT AUTO_INCREMENT;
ALTER TABLE EMPRESA MODIFY CODIGO INT AUTO_INCREMENT;
ALTER TABLE FUNCIONARIO_CARGO MODIFY CODIGO INT AUTO_INCREMENT;

/* DEFINIÇÃO DAS CHAVES ESTRANGEIRAS */

ALTER TABLE FUNCIONARIO_CARGO ADD FOREIGN KEY FK_CARGO (CARGO) REFERENCES CARGO (CODIGO);
ALTER TABLE FUNCIONARIO_CARGO ADD FOREIGN KEY FK_EMPRESA (EMPRESA) REFERENCES EMPRESA (CODIGO);

/* CRIAÇÃO DOS PROCEDIMENTOS */

DELIMITER $$
CREATE PROCEDURE MOSTRAR_ERRO(MENSAGEM VARCHAR(200))
BEGIN
	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MENSAGEM;
END$$
DELIMITER ;

/* CRIAÇÃO DAS FUNÇÕES */

DELIMITER $$
CREATE FUNCTION CHECAR_PERIODO_CARGO(DATA_INICIO DATE, DATA_FIM DATE) RETURNS TINYINT DETERMINISTIC
BEGIN
	RETURN ((DATA_FIM IS NULL) || (DATA_INICIO <= DATA_FIM));
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION INCLUIR_FUNCIONARIO_CARGO(v_CARGO INT, v_EMPRESA INT, v_DATA_INICIO DATE, v_DATA_FIM DATE, v_DESCRICAO TEXT) RETURNS INT
BEGIN
	DECLARE v_CODIGO INT;
	INSERT INTO
		FUNCIONARIO_CARGO
		(CARGO, EMPRESA, DATA_INICIO, DATA_FIM, DESCRICAO)
	VALUES
		(v_CARGO, v_EMPRESA, v_DATA_INICIO, v_DATA_FIM, v_DESCRICAO);
	SELECT
		MAX(CODIGO)
	INTO
		v_CODIGO
	FROM
		FUNCIONARIO_CARGO;
	RETURN v_CODIGO;	
END$$
DELIMITER ;

/* CRIAÇÃO DOS GATILHOS */

DELIMITER $$
CREATE TRIGGER TRG_FUNCIONARIO_CARGO_BEFORE_INSERT BEFORE INSERT ON FUNCIONARIO_CARGO FOR EACH ROW
BEGIN
	IF NOT (CHECAR_PERIODO_CARGO(NEW.DATA_INICIO, NEW.DATA_FIM)) THEN
		CALL MOSTRAR_ERRO('O campo "FUNCIONARIO_CARGO.DATA_FIM" deve ser maior ou igual ao campo "FUNCIONARIO_CARGO.DATA_INICIO".');
	END IF;		
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER TRG_FUNCIONARIO_CARGO_BEFORE_UPDATE BEFORE UPDATE ON FUNCIONARIO_CARGO FOR EACH ROW
BEGIN
	IF NOT (CHECAR_PERIODO_CARGO(NEW.DATA_INICIO, NEW.DATA_FIM)) THEN
		CALL MOSTRAR_ERRO('O campo "FUNCIONARIO_CARGO.DATA_FIM" deve ser maior ou igual ao campo "FUNCIONARIO_CARGO.DATA_INICIO".');
	END IF;
END$$
DELIMITER ;

/* INCLUSÃO DOS REGISTROS */

INSERT INTO CARGO (NOME) VALUES ('Analista de Recursos Humanos');
INSERT INTO CARGO (NOME) VALUES ('Gerente de Projetos');
INSERT INTO CARGO (NOME) VALUES ('Desenvolvedor Android');
INSERT INTO CARGO (NOME) VALUES ('Técnico em Suporte');
INSERT INTO CARGO (NOME) VALUES ('Estagiário em Infraestrutura de Rede');

INSERT INTO EMPRESA (NOME) VALUES ('SoftVision');
INSERT INTO EMPRESA (NOME) VALUES ('Google');
INSERT INTO EMPRESA (NOME) VALUES ('Thomson Reuters');
INSERT INTO EMPRESA (NOME) VALUES ('Microsoft');
INSERT INTO EMPRESA (NOME) VALUES ('Dextra');

INSERT INTO FUNCIONARIO_CARGO (CARGO, EMPRESA, DATA_INICIO, DATA_FIM, DESCRICAO) VALUES (1, 3, '2018-01-13', '2018-05-03', NULL);
INSERT INTO FUNCIONARIO_CARGO (CARGO, EMPRESA, DATA_INICIO, DATA_FIM, DESCRICAO) VALUES (2, 1, '2018-06-15', NULL, NULL);
INSERT INTO FUNCIONARIO_CARGO (CARGO, EMPRESA, DATA_INICIO, DATA_FIM, DESCRICAO) VALUES (4, 2, '2017-08-08', '2017-12-11', NULL);